using Pkg
cd(joinpath(@__DIR__, ".."))
Pkg.activate(".")
Pkg.instantiate()
# 
using X2DDpi
using Parameters
using Measurements
using Interpolations
using Statistics
using LaTeXStrings
using DataFrames
using Markdown

using Plots
theme(:wong2, size=(500, 350), minorticks=true, grid=false, frame=:box,
    guidefontvalign=:top, guidefonthalign=:right,
    foreground_color_legend=nothing,
    legendfontsize=9, legend=:topright,
    xlim=(:auto, :auto), ylim=(:auto, :auto))


#        _|              _|                
#    _|_|_|    _|_|_|  _|_|_|_|    _|_|_|  
#  _|    _|  _|    _|    _|      _|    _|  
#  _|    _|  _|    _|    _|      _|    _|  
#    _|_|_|    _|_|_|      _|_|    _|_|_|  

settings = transformdictrecursively!(readjson("settings.json"), ifstringgivemeasurement)
#
@unpack Œ¥m0 = settings["fitresults"]
const Œ¥m0_val = Œ¥m0.val
@unpack cutoff, estep = settings["phspmatching"]


#                            _|            
#    _|_|_|    _|_|      _|_|_|    _|_|    
#  _|        _|    _|  _|    _|  _|_|_|_|  
#  _|        _|    _|  _|    _|  _|        
#    _|_|_|    _|_|      _|_|_|    _|_|_|  


# œÄDD + œÄDD + Œ≥DD: DÀ£‚Å∫ + DÀ£‚Å∫ + DÀ£‚Å∞
"""
The default full model.
In includes three three-body cuts, œÄ‚Å∫D‚Å∞D‚Å∞ + œÄ‚Å∞D‚Å∞D‚Å∫ + Œ≥D‚Å∞D‚Å∫ and all possible resonances:
 - two DÀ£‚Å∫ in œÄ‚Å∫D‚Å∞D‚Å∞
 - DÀ£‚Å∫ and DÀ£‚Å∞ in œÄ‚Å∞D‚Å∞D‚Å∫
 - DÀ£‚Å∫ and DÀ£‚Å∞ in Œ≥D‚Å∞D‚Å∫
"""
const model0 = let
    ch1 = œÄDD((m1=mœÄ‚Å∫, m2=mD‚Å∞, m3=mD‚Å∞), BW(m=mDÀ£‚Å∫, Œì=ŒìDÀ£‚Å∫), BW(m=mDÀ£‚Å∫, Œì=ŒìDÀ£‚Å∫))
    ch2 = œÄDD((m1=mœÄ‚Å∞, m2=mD‚Å∫, m3=mD‚Å∞), BW(m=mDÀ£‚Å∫, Œì=ŒìDÀ£‚Å∫), BW(m=mDÀ£‚Å∞, Œì=ŒìDÀ£‚Å∞))
    ch3 = Œ≥DD((m1=mŒ≥, m2=mD‚Å∫, m3=mD‚Å∞), BW(m=mDÀ£‚Å∫, Œì=ŒìDÀ£‚Å∫), BW(m=mDÀ£‚Å∞, Œì=ŒìDÀ£‚Å∞))
    # 
    @time iœÄDD2 = interpolated(
        ChannelWithIntegrationMethod(ch1, HookSqrtDalitzMapping{2}()),
        cutoff; estep=estep)
    @time iœÄDD3 = interpolated(
        ChannelWithIntegrationMethod(ch1, HookSqrtDalitzMapping{3}()),
        cutoff; estep=estep)
    # 
    @time iœÄDD2‚Ä≤ = interpolated(
        ChannelWithIntegrationMethod(ch2, HookSqrtDalitzMapping{2}()),
        cutoff; estep=estep)
    @time iœÄDD3‚Ä≤ = interpolated(
        ChannelWithIntegrationMethod(ch2, HookSqrtDalitzMapping{3}()),
        cutoff; estep=estep)
    # 
    @time iŒ≥DD2 = interpolated(
        ChannelWithIntegrationMethod(ch3, HookSqrtDalitzMapping{2}()),
        cutoff; estep=estep)
    @time iŒ≥DD3 = interpolated(
        ChannelWithIntegrationMethod(ch3, HookSqrtDalitzMapping{3}()),
        cutoff; estep=estep)
    # 
    Amplitude((iœÄDD2, iœÄDD3, iœÄDD2‚Ä≤, iœÄDD3‚Ä≤, iŒ≥DD2, iŒ≥DD3))
end


# œÄDD + œÄDD + Œ≥DD: DÀ£‚Å∫
"""
The model with the DÀ£‚Å∫ resonance only.
However, it includes three three-body cuts, œÄ‚Å∫D‚Å∞D‚Å∞ + œÄ‚Å∞D‚Å∞D‚Å∫ + Œ≥D‚Å∞D‚Å∫:
 - two DÀ£‚Å∫ in œÄ‚Å∫D‚Å∞D‚Å∞
 - one DÀ£‚Å∫ in œÄ‚Å∞D‚Å∞D‚Å∫
 - one DÀ£‚Å∫ in Œ≥D‚Å∞D‚Å∫
"""
const model1 = let
    # ch1 = œÄDD((m1=mœÄ‚Å∫,m2=mD‚Å∞,m3=mD‚Å∞), BW(m=mDÀ£‚Å∫,Œì=ŒìDÀ£‚Å∫), BW(m=mDÀ£‚Å∫,Œì=ŒìDÀ£‚Å∫))
    ch2 = œÄDD((m1=mœÄ‚Å∞, m2=mD‚Å∫, m3=mD‚Å∞), BW(m=mDÀ£‚Å∫, Œì=ŒìDÀ£‚Å∫), ZeroBW(m=mDÀ£‚Å∞, Œì=ŒìDÀ£‚Å∞))
    ch3 = Œ≥DD((m1=mŒ≥, m2=mD‚Å∫, m3=mD‚Å∞), BW(m=mDÀ£‚Å∫, Œì=ŒìDÀ£‚Å∫), ZeroBW(m=mDÀ£‚Å∞, Œì=ŒìDÀ£‚Å∞))
    # 
    # iœÄDD2 = interpolated(
    #     ChannelWithIntegrationMethod(ch1, HookSqrtDalitzMapping{2}()),
    #     cutoff; estep=estep)
    # iœÄDD3 = interpolated(
    #     ChannelWithIntegrationMethod(ch1, HookSqrtDalitzMapping{3}()),
    #     cutoff; estep=estep)
    iœÄDD2, iœÄDD3 = model0.ik[1], model0.ik[2]
    # 
    @time iœÄDD3‚Ä≤ = interpolated(
        ChannelWithIntegrationMethod(ch2, HookSqrtDalitzMapping{3}()),
        cutoff; estep=estep)
    # 
    @time iŒ≥DD3 = interpolated(
        ChannelWithIntegrationMethod(ch3, HookSqrtDalitzMapping{3}()),
        cutoff; estep=estep)
    # 
    Amplitude((iœÄDD2, iœÄDD3, iœÄDD3‚Ä≤, iŒ≥DD3))
end

# œÄDD: DÀ£‚Å∫ + DÀ£‚Å∫
"""
The model with the œÄ‚Å∫D‚Å∞D‚Å∞ system with two DÀ£‚Å∫ resonances.
"""
const model2 = let
    # ch1 = œÄDD((m1=mœÄ‚Å∫,m2=mD‚Å∞,m3=mD‚Å∞), BW(m=mDÀ£‚Å∫,Œì=ŒìDÀ£‚Å∫), BW(m=mDÀ£‚Å∫,Œì=ŒìDÀ£‚Å∫))
    iœÄDD2, iœÄDD3 = model0.ik[1], model0.ik[2]
    # 
    # set3 = ChannelWithIntegrationMethod(ch, HookSqrtDalitzMapping{3}())
    # ich3 = interpolated(set3, cutoff; estep=estep)
    # 
    Amplitude((iœÄDD2, iœÄDD3))
end

# œÄDD: DÀ£‚Å∫
"""
The model with the œÄ‚Å∫D‚Å∞D‚Å∞ system with a single, unsymmetrized DÀ£‚Å∫ resonance.
"""
const model3 = let
    ch = œÄDD((m1=mœÄ‚Å∫, m2=mD‚Å∞, m3=mD‚Å∞), BW(m=mDÀ£‚Å∫, Œì=ŒìDÀ£‚Å∫), ZeroBW(m=mDÀ£‚Å∫, Œì=ŒìDÀ£‚Å∫))
    # 
    set3 = ChannelWithIntegrationMethod(ch, HookSqrtDalitzMapping{3}())
    ich3 = interpolated(set3, cutoff; estep=estep)
    # 
    Amplitude((ich3,))
end

# œÄDD: DÀ£‚Å∫
const model4 = Amplitude(
    interpolated(
        DÀ£D((m1=mœÄ‚Å∫, m2=mD‚Å∞, m3=mD‚Å∞), BW(m=mDÀ£‚Å∫, Œì=ŒìDÀ£‚Å∫)),
        cutoff; estep=estep))
# 
# 
modelnames = [:model0, :model1, :model2, :model3, :model4]
const Nm = length(modelnames)



# let
#     @time effrangepars = # 12s
#         effectiverangeexpansion(
#             Œîe -> denominator_II(model0, E·µ¶À£‚Å∫ + Œîe, Œ¥m0_val),
#             Œîe -> k3b(E·µ¶À£‚Å∫ + Œîe),
#             ComplexBranchPointExpansion(CircularSum(abs(imag(E·µ¶À£‚Å∫)) / 20, 50)))
#     # 
#     (; tophysicsunits(effrangepars)..., effrangepars...)
# end


df = DataFrame(; modelnames)
df.model = eval.(df.modelnames)
# 
df1 = DataFrame(zeros(Complex{Float64}, Nm, 4 * 3),
    [:a‚Åª¬π, :r, :r_fm, :N,
        :a‚Åª¬π‚Å∫·µü, :r‚Å∫·µü, :r_fm‚Å∫·µü, :N‚Å∫·µü,
        :a‚Åª¬π‚Åª·µü, :r‚Åª·µü, :r_fm‚Åª·µü, :N‚Åª·µü])
# 
df2 = DataFrame(
    zeros(Float64, Nm, 1 * 3),
    [:a_fm, :a_fm‚Å∫·µü, :a_fm‚Åª·µü,])
# 
df = hcat(df, df1, df2)

let Nappr = 150, Rexp = abs(imag(E·µ¶À£‚Å∫)) / 20
    # 
    for i in 1:Nm
        ùíú = df.model[i]
        @time effrangepars = # 12s
            effectiverangeexpansion(
                Œîe -> denominator_II(ùíú, E·µ¶À£‚Å∫ + Œîe, Œ¥m0_val),
                Œîe -> k3b(E·µ¶À£‚Å∫ + Œîe),
                ComplexBranchPointExpansion(CircularSum(Rexp, Nappr)))
        # 
        efrpars = (; tophysicsunits(effrangepars)..., effrangepars...)
        # 
        df.a_fm[i] = efrpars.a_fm
        df.r_fm[i] = efrpars.r_fm
        df.a‚Åª¬π[i] = efrpars.a‚Åª¬π
        df.r[i] = efrpars.r
        df.N[i] = efrpars.N
    end
end

let Nappr = 150, Rexp = abs(imag(E·µ¶À£‚Å∫)) / 20
    # 
    for i in 1:Nm
        ùíú = df.model[i]
        # 
        # dm0+Œ¥dm0
        @time effrangepars‚Å∫·µü = # 12s
            effectiverangeexpansion(
                Œîe -> denominator_II(ùíú, E·µ¶À£‚Å∫ + Œîe, Œ¥m0_val + Œ¥m0.err),
                Œîe -> k3b(E·µ¶À£‚Å∫ + Œîe),
                ComplexBranchPointExpansion(CircularSum(Rexp, Nappr)))
        # 
        efrpars‚Å∫·µü = (; tophysicsunits(effrangepars‚Å∫·µü)..., effrangepars‚Å∫·µü...)
        # 
        df.a_fm‚Å∫·µü[i] = efrpars‚Å∫·µü.a_fm
        df.r_fm‚Å∫·µü[i] = efrpars‚Å∫·µü.r_fm
        df.a‚Åª¬π‚Å∫·µü[i] = efrpars‚Å∫·µü.a‚Åª¬π
        df.r‚Å∫·µü[i] = efrpars‚Å∫·µü.r
        df.N‚Å∫·µü[i] = efrpars‚Å∫·µü.N
        #
        # dm0-Œ¥dm0
        @time effrangepars‚Åª·µü = # 12s
            effectiverangeexpansion(
                Œîe -> denominator_II(ùíú, E·µ¶À£‚Å∫ + Œîe, Œ¥m0_val - Œ¥m0.err),
                Œîe -> k3b(E·µ¶À£‚Å∫ + Œîe),
                ComplexBranchPointExpansion(CircularSum(Rexp, Nappr)))
        # 
        efrpars‚Åª·µü = (; tophysicsunits(effrangepars‚Åª·µü)..., effrangepars‚Åª·µü...)
        # 
        df.a_fm‚Åª·µü[i] = efrpars‚Åª·µü.a_fm
        df.r_fm‚Åª·µü[i] = efrpars‚Åª·µü.r_fm
        df.a‚Åª¬π‚Åª·µü[i] = efrpars‚Åª·µü.a‚Åª¬π
        df.r‚Åª·µü[i] = efrpars‚Åª·µü.r
        df.N‚Åª·µü[i] = efrpars‚Åª·µü.N
    end
end


# test
summarized_columns = vcat((["a_fm" "r_fm"] .* ["", "‚Å∫·µü", "‚Åª·µü"])...)
df_summary = select(df, :modelnames,
    summarized_columns .=> ByRow(x -> round(x; digits=2)) .=> summarized_columns .* "_round")
print(df_summary)

md"""
- The effective range is positive +0.15 fm for the model with one DÀ£‚Å∫ resonance (model3).
The positive slope comes from the two-body loop integral. 
- Once the OPE is included (model2), | DÀ£‚Å∫ + DÀ£‚Å∫ |¬≤, the effective range turns negative, -0.78 fm
- The next step is to add two other three-body thresholds, D‚Å∞D‚Å∫œÄ‚Å∞ and D‚Å∞D‚Å∫Œ≥, where the DÀ£‚Å∫ can decay, the effective range changes unsignificantly, -0.63 fm
- The full model is obtained by adding the DÀ£‚Å∞D‚Å∫ threshold, the value of the effective range is shifted to -4.36 fm
"""

writejson(joinpath("results", "nominal", "effective-range-table.json"),
    hcat(df_summary, select(df, Not([:modelnames, :model]))))
#

