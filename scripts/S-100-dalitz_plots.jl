using Pkg
cd(joinpath(@__DIR__,".."))
Pkg.activate(".")

using X2DDpi

using Plots
using LaTeXStrings
theme(:wong2, size=(450,400), minorticks=true, grid=false, frame=:box,
    guidefontvalign=:top, guidefonthalign=:right,
    foreground_color_legend = nothing,
    legendfontsize=9, legend =:topright,
    xlim=(:auto,:auto), ylim=(:auto,:auto),
    xlab=L"m_{D^0\pi^+}^2\,\,[\mathrm{GeV}]", ylab=L"m_{D^0\pi^+}^2\,\,[\mathrm{GeV}]")


# 
using Parameters
using Measurements
# 
using ThreeBodyDecay
using PartialWaveFunctions


settings = transformdictrecursively!(readjson("settings.json"), ifstringgivemeasurement)
#
@unpack Œ¥m0 = settings["fitresults"]

# retrieve the model
modelDict = readjson(joinpath("results","nominal","model.json"))
ichannels = interpolated.(d2nt.(modelDict["ichannels"]))
channels = getproperty.(ichannels, :channel)

const ch1 = œÄDD((m1=mœÄ‚Å∫,m2=mD‚Å∞,m3=mD‚Å∞), (m=mDÀ£‚Å∫,Œì=ŒìDÀ£‚Å∫), (m=mDÀ£‚Å∫,Œì=ŒìDÀ£‚Å∫))

const m0 = e2m(Œ¥m0.val) 
const s0 = e2m(Œ¥m0.val)^2 
const ms = ThreeBodyMasses(ch1.ms...;m0)

###################################################################

import X2DDpi: decay_matrix_element_squared
import X2DDpi: AbstractxDD

@with_kw struct œÄDD_heli <: AbstractxDD
    j0::Int = 1
    j::Int = 1
    L::Int = 0
    plus::Bool = true
end

pDœÄ(œÉ) = œÉ > (mD‚Å∞+mœÄ‚Å∫)^2 ? sqrt(Œª(œÉ,mD‚Å∞^2,mœÄ‚Å∫^2)/(4*œÉ)) : 0.0
pDÀ£D(œÉ) = œÉ < (m0-mD‚Å∞)^2 ? sqrt(Œª(s0,œÉ,mD‚Å∞^2)/(4*s0)) : 0.0

function decay_matrix_element_squared(d::œÄDD_heli,s,œÉ3,œÉ2)
    s != s0 && println("\nHm, s != s0 !\n")
    # 
    @unpack j, j0, L, plus = d
    # 
	J12_I, J12_II = J_I(œÉ3,ch1.R12), J_II(œÉ3,ch1.R12)
	J13_I, J13_II = J_I(œÉ2,ch1.R13), J_II(œÉ2,ch1.R13)
    p12_j = pDœÄ(œÉ3)^j; p3_L = (L==0 ? 1.0 : pDÀ£D(œÉ3)^L)
    p13_j = pDœÄ(œÉ2)^j; p2_L = (L==0 ? 1.0 : pDÀ£D(œÉ2)^L)
    # 
    msq4 = ms^2
    œÉs = Invariants(ms; œÉ3,œÉ2)

    zhat23 = cosŒ∏hat23(œÉs,msq4)
    z12 = cosŒ∏12(œÉs,msq4)
    z31 = cosŒ∏31(œÉs,msq4)
    H(ŒΩ) = clebschgordan(L,0,j,ŒΩ,j0,ŒΩ)


    ùîê¬≤ =
        sum(abs2, wignerd(j,Œª,0,z12)*H(Œª)*p12_j*p3_L for Œª in -j:j) * J12_I*J12_II +
        sum(abs2, wignerd(j,Œª,0,z31)*H(Œª)*p13_j*p2_L for Œª in -j:j) * J13_I*J13_II +
            (plus ? 1 : -1) * (J13_I * J12_II +  J12_I * J13_II) *
            sum(wignerd(j,Œª,0,z12)*H(Œª) * p12_j * p3_L *
                wignerd(j,ŒΩ,0,z31)*H(ŒΩ) * p13_j * p2_L *
                wignerd(j0,Œª,ŒΩ,zhat23)
                    for (ŒΩ,Œª) in Iterators.product(-j:j,-j:j))
    return ùîê¬≤
end


hel = œÄDD_heli(;plus=false)
let œÉs = randomPoint(ms)
    decay_matrix_element_squared(hel,s0, œÉs.œÉ3,œÉs.œÉ2)
end

dalitzplot(hel; what2apply=real)
dalitzplot(hel; what2apply=log ‚àò real)
dalitzplot(ch1; what2apply=log ‚àò real)

# interesting_combinations
interesting_combinations = [
    (;j0=1,j=1,L=0,plus=false)
    (;j0=1,j=1,L=0,plus=true )
    (;j0=1,j=1,L=1,plus=false)
    (;j0=1,j=1,L=1,plus=true )
    (;j0=0,j=1,L=1,plus=false)
    (;j0=0,j=1,L=1,plus=true )
    (;j0=2,j=1,L=1,plus=false)
    (;j0=2,j=1,L=1,plus=true )
]

for ic in interesting_combinations
    @unpack j, j0, L, plus = ic
    sign = plus ? '+' : '-'
    dalitzplot(œÄDD_heli(;j0,j,L,plus);
        title=latexstring("X\\to (D^0\\pi^+)_\\mathrm{P}D^0\\textrm{$(sign)}D^0(\\pi^+D^0)_\\mathrm{P}"))
    annotate!(4.018, 4.038, text(latexstring("j_X=$(j0), L_{D^*D}=$(L)"), :left))
    savefig(joinpath("plots","nominal","dalitz","dalitz_j0=$(j0)_j=$(j)_L=$(L)_signplus=$(plus).pdf"))
end


ps = [let
    @unpack j, j0, L, plus = ic
    sign = plus ? '+' : '-'
    dalitzplot(œÄDD_heli(;j0,j,L,plus); ticks=false, xlab="", ylab="",
        title=latexstring("X\\to (D^0\\pi^+)_\\mathrm{P}D^0\\textrm{$(sign)}D^0(\\pi^+D^0)_\\mathrm{P}"))
    annotate!(4.018, 4.038, text(latexstring("j_X=$(j0), L_{D^*D}=$(L)"), :left))
end for ic in interesting_combinations]

plot(ps..., layout=grid(4,2), size=(450*2, 400*4))
savefig(joinpath("plots","nominal","dalitz","dalitz_summary.pdf"))
